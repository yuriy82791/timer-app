{"version":3,"sources":["components/Timer/index.js","index.js"],"names":["time","timerStep","autoStart","onTick","onTimeEnd","onTimeStart","onTimePause","useState","start","changeState","timeLeft","setTimeLeft","useEffect","intervalId","setInterval","clearInterval","className","moment","format","Button","variant","color","onClick","ReactDOM","render","StrictMode","Timer","console","log","document","getElementById"],"mappings":"sQAKe,G,MAAA,YAQR,IAPLA,EAOI,EAPJA,KACAC,EAMI,EANJA,UACAC,EAKI,EALJA,UACAC,EAII,EAJJA,OACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,YACAC,EACI,EADJA,YACI,EACyBC,mBAASL,GADlC,mBACGM,EADH,KACUC,EADV,OAE4BF,mBAASP,GAFrC,mBAEGU,EAFH,KAEaC,EAFb,KAwBJ,OAjBAC,qBAAU,WACR,IAAIC,EAAa,KACjB,OAAKH,GAMDF,IACFK,EAAaC,aAAY,WACvBH,EAAYD,EAAWT,EAAY,OAClCA,GACHE,EAAOO,IAGF,kBAAMK,cAAcF,MAZzBT,IACAO,EAAYX,QACZS,GAAaD,MAWd,CAACR,EAAMU,EAAUT,EAAWO,EAAOL,EAAQC,IAE5C,yBAAKY,UAAU,iBACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,eACZC,IAAkB,IAAXP,GAAiBQ,OAAO,UAElC,kBAACC,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNL,UAAU,eACVM,QA/BR,WACEb,GAAaD,GACbA,EAAQH,IAAgBC,MA+BjBE,EAAQ,OAAS,a,MC7C5Be,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAD,CACE1B,KAAM,GACNC,UAAW,IACXC,WAAW,EACXC,OAAQ,SAACH,GAAD,OAAU2B,QAAQC,IAAI,gGAAuB5B,IACrDI,UAAW,kBAAMuB,QAAQC,IAAI,mEAC7BvB,YAAa,kBAAMsB,QAAQC,IAAI,qFAC/BtB,YAAa,kBAAMqB,QAAQC,IAAI,yFAGnCC,SAASC,eAAe,W","file":"static/js/main.7305e879.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport moment from \"moment\";\r\nimport \"./style.css\";\r\n\r\nexport default ({\r\n  time,\r\n  timerStep,\r\n  autoStart,\r\n  onTick,\r\n  onTimeEnd,\r\n  onTimeStart,\r\n  onTimePause,\r\n}) => {\r\n  const [start, changeState] = useState(autoStart);\r\n  const [timeLeft, setTimeLeft] = useState(time);\r\n  function startTimer() {\r\n    changeState(!start);\r\n    start ? onTimeStart() : onTimePause();\r\n  }\r\n  useEffect(() => {\r\n    let intervalId = null;\r\n    if (!timeLeft) {\r\n      onTimeEnd();\r\n      setTimeLeft(time);\r\n      changeState(!start);\r\n      return;\r\n    }\r\n    if (start) {\r\n      intervalId = setInterval(() => {\r\n        setTimeLeft(timeLeft - timerStep / 1000);\r\n      }, timerStep);\r\n      onTick(timeLeft);\r\n    }\r\n\r\n    return () => clearInterval(intervalId);\r\n  }, [time, timeLeft, timerStep, start, onTick, onTimeEnd]);\r\n  return (\r\n    <div className=\"timer-wrapper\">\r\n      <div className=\"timer-container\">\r\n        <div className=\"timer-count\">\r\n          {moment(timeLeft * 1000).format(\"mm:ss\")}\r\n        </div>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          className=\"start-button\"\r\n          onClick={startTimer}\r\n        >\r\n          {start ? \"Stop\" : \"Start\"}\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Timer from \"./components/Timer\";\nimport \"./reset.css\";\nReactDOM.render(\n  <React.StrictMode>\n    <Timer\n      time={10}\n      timerStep={1000}\n      autoStart={false}\n      onTick={(time) => console.log(\"Осталось времени: \" + time)}\n      onTimeEnd={() => console.log(\"Время вышло!\")}\n      onTimeStart={() => console.log(\"Таймер запущен!\")}\n      onTimePause={() => console.log(\"Таймер на паузе!\")}\n    />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}